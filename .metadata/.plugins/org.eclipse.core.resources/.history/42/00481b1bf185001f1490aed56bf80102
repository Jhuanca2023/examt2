package com.examt2.examt2.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import com.examt2.examt2.model.Cliente;
import com.examt2.examt2.model.Libro;
import com.examt2.examt2.model.Orden;
import com.examt2.examt2.repository.ClienteRepository;
import com.examt2.examt2.repository.LibroRepository;
import com.examt2.examt2.repository.OrdenRepository;

import javax.validation.Valid;
import java.util.Date;

@Controller
@RequestMapping("/ordenes")
public class OrdenController {

    @Autowired
    private OrdenRepository ordenRepository;
    
    @Autowired
    private ClienteRepository clienteRepository;  // Inyección del repositorio

    // Listar órdenes
    @GetMapping
    public String listarOrdenes(Model model) {
        model.addAttribute("ordenes", ordenRepository.findAll());
        return "ordenes/index"; // Lista de órdenes
    }


    // Formulario para crear una nueva orden
    @GetMapping("/crear")
    public String crearOrdenForm(Model model) {
        model.addAttribute("orden", new Orden()); // Inicializa un nuevo objeto Orden
        return "ordenes/form"; // Ruta al formulario de órdenes
    }

    // Guardar una nueva orden
    @PostMapping("/crear")
    public String guardarOrden(@RequestParam String nombreCliente, @ModelAttribute @Valid Orden orden, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("orden", orden);
            return "ordenes/form";
        }

        // Buscar el cliente por nombre
        Cliente cliente = clienteRepository.findByNombre(nombreCliente);
        if (cliente != null) {
            orden.setClienteId(cliente.getId());
        } else {
            model.addAttribute("error", "Cliente no encontrado");
            return "ordenes/form";
        }

        // Asignar fecha y guardar orden
        orden.setFechaOrden(new Date());
        ordenRepository.save(orden);
        return "redirect:/ordenes";
    }



    // Formulario para editar una orden existente
    @GetMapping("/editar/{id}")
    public String editarOrdenForm(@PathVariable Long id, Model model) {
        Orden orden = ordenRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid orden Id:" + id));
        model.addAttribute("orden", orden);
        return "ordenes/form"; // Ruta al formulario de órdenes
    }

    // Actualizar una orden existente
    @PostMapping("/editar/{id}")
    public String actualizarOrden(@PathVariable Long id, @ModelAttribute @Valid Orden orden, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("orden", orden); // Reenvía el objeto con errores
            return "ordenes/form"; // Regresar al formulario si hay errores
        }
        orden.setId(id); // Establecer el ID de la orden a actualizar
        ordenRepository.save(orden); // Guardar la orden actualizada
        return "redirect:/ordenes"; // Redirigir a la lista de órdenes
    }

    // Eliminar una orden
    @GetMapping("/eliminar/{id}")
    public String eliminarOrden(@PathVariable Long id) {
        ordenRepository.deleteById(id);
        return "redirect:/ordenes";
    }
}
